steps:
  # Build/restore the BuildKit tool
  - task: Cache@2
    inputs:
      key: $(CACHE_KEY_BUILDKIT)
      path: '$(System.DefaultWorkingDirectory)/buildkit'
      cacheHitVar: 'BuildKitToolHit'
    displayName: 'cache buildkit tool'

  - script: |
      git clone https://github.com/moby/buildkit.git  --branch $(BUILDKIT_COMMIT) --depth 1
      cd buildkit
      make
    displayName: "Build BuildKit on cache miss"
    condition: and(succeeded(), ne(variables['BuildKitToolHit'], 'true'))

  - script: |
      cd buildkit
      sudo make install
      which buildctl
      which buildkitd
      set -e -x
      sudo buildkitd --debug --root /var/lib/buildkit &

      until sudo buildctl du -v
      do
        echo "Waiting for daemon to load"
        sleep 1
      done
      DOCKER_COMMAND="$(DOCKER_COMMAND)"
    displayName: "Install and start buildkit"


  # restore the BuildKit cache based on the Dockerfile ...
  - task: Cache@2
    inputs:
      key: $(CACHE_KEY_EXACT)
      path: '$(BUILD_KIT_CACHE)'
      cacheHitVar: 'BuildKitLayersHit'
      restoreKeys: $(CACHE_KEY_FALLBACK)
    displayName: 'cache docker layers'

  - script: |
      which buildkit
      if [ -d "$(BUILD_KIT_CACHE)" ]; then
        echo "Will use cached layers from $(BUILD_KIT_CACHE)"
        find $(BUILD_KIT_CACHE)
        DOCKER_COMMAND="$DOCKER_COMMAND --import-cache type=local,src=$(BUILD_KIT_CACHE)"
      fi
      if [ "$(BuildKitLayersHit)" != "true" ]; then
        echo "Will store cached layers to $(BUILD_KIT_CACHE)"
        DOCKER_COMMAND="$DOCKER_COMMAND --export-cache mode=max,type=local,dest=$(BUILD_KIT_CACHE)"
      fi
      echo  "##vso[task.setvariable variable=DOCKER_COMMAND]${DOCKER_COMMAND}"
    displayName: 'cache docker layers'

  - script: docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
    displayName: 'Log into docker registry'
    env:
      DOCKER_USERNAME: $(DOCKER_USERNAME)
      DOCKER_PASSWORD: $(DOCKER_PASSWORD)

  - script: ${DOCKER_COMMAND} --build-arg BUILDKIT_INLINE_CACHE=1 -t derex/edx-${DOCKER_IMAGES_SLUG}-libgeos --target libgeos docker-definition/
    displayName: Build libgeos image

  - script: docker push derex/edx-${DOCKER_IMAGES_SLUG}-libgeos
    displayName: Push libgeos

  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} -t derex/edx-${DOCKER_IMAGES_SLUG}-base --target base docker-definition/
    displayName: Build base image

  - script: docker push derex/edx-${DOCKER_IMAGES_SLUG}-base
    displayName: Push base

  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} -t derex/edx-${DOCKER_IMAGES_SLUG}-sourceonly --target sourceonly docker-definition/
    displayName: Build sourceonly image

  - script: docker push derex/edx-${DOCKER_IMAGES_SLUG}-sourceonly
    displayName: Push sourceonly

  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} -t derex/edx-${DOCKER_IMAGES_SLUG}-wheels --target wheels docker-definition/
    displayName: Build wheels image

  - script: docker push derex/edx-${DOCKER_IMAGES_SLUG}-wheels
    displayName: Push wheels

  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} -t derex/edx-${DOCKER_IMAGES_SLUG}-nostatic --target nostatic docker-definition/
    displayName: Build nostatic image

  - script: docker push derex/edx-${DOCKER_IMAGES_SLUG}-nostatic
    displayName: Push nostatic

  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} -t derex/edx-${DOCKER_IMAGES_SLUG}-nostatic-dev --target nostatic-dev docker-definition/
    displayName: Build nostatic-dev image

  - script: docker push derex/edx-${DOCKER_IMAGES_SLUG}-nostatic-dev
    displayName: Push nostatic-dev

  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} -t derex/edx-${DOCKER_IMAGES_SLUG}-dev-nodump --target dev-nodump docker-definition/
    displayName: Build dev-nodump image

  - script: docker push derex/edx-${DOCKER_IMAGES_SLUG}-dev-nodump
    displayName: Push dev-nodump

  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} -t derex/edx-${DOCKER_IMAGES_SLUG}-dump --target dump docker-definition/
    displayName: Build dump image

  - script: docker push derex/edx-${DOCKER_IMAGES_SLUG}-dump
    displayName: Push dump

  # No caching here: the previous one is enough, and it seems to stall for some reason
  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} -t derex/edx-${DOCKER_IMAGES_SLUG}-dev --target dev docker-definition/
    displayName: Build dev image

  - script: docker push derex/edx-${DOCKER_IMAGES_SLUG}-dev
    displayName: Push dev
