pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: Docker credentials
  - group: Transifex credentials

steps:
  - script: |
      set -ex
      sudo systemctl stop mysql
      docker run -d -p 3306:3306 --name mysql --rm -e MYSQL_ROOT_PASSWORD=secret mysql:5.6.44 mysqld --character-set-server=utf8 --collation-server=utf8_general_ci
    displayName: Setup Mysql server


  - script: |
      docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
    displayName: 'Log into docker registry'
    env:
      DOCKER_USERNAME: $(DOCKER_USERNAME)
      DOCKER_PASSWORD: $(DOCKER_PASSWORD)

  - script: docker pull derex/buildah
    displayName: 'Pull Buildah image'

  - script: |
      pwd
      mkdir .cache/wheels_cache
      docker run --rm --mount type=bind,source=${PWD}/.cache/wheels_cache,target=/dest derex/wheelhouse sh -c "cp -v /wheelhouse/*.whl /dest/; chown $(id -u):$(id -g) /dest/ -R"
    displayName: 'Put wheels cache in place'

  - script: |
      set -ex
      docker run \
        --rm --privileged --security-opt="seccomp=unconfined" \
        --cap-add=ALL \
        -v /var/lib/containers/:/var/lib/containers/:rw,Z \
        -v /var/run/docker.sock:/var/run/docker.sock \
        --mount type=bind,source=${PWD},target=${PWD} \
        -e TRANSIFEX_USERNAME=$TRANSIFEX_USERNAME \
        -e TRANSIFEX_PASSWORD=$TRANSIFEX_PASSWORD \
        derex/buildah \
        bash -c "
          set -ex
          cd ${PWD}
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt
          pip3 install .
          # Sometimes azure has a colon in ${PWD}. Buildah does not like it.
          # Also, Buildah only accepts absolute paths. So we temporarily
          # move wheels_cache to the root.
          cp -r '${PWD}/.cache/wheels_cache' /
          export WHEELS_CACHE=/wheels_cache
          export LATEST_IMAGE=\$(derex.builder image derex/openedx/ironwood)
          echo '#''#vso[task.setvariable variable=LATEST_IMAGE]'\$LATEST_IMAGE
          export WHEELS_IMAGE=\$(derex.builder image derex/openedx/wheels)
          echo '#''#vso[task.setvariable variable=WHEELS_IMAGE]'\$WHEELS_IMAGE
          echo Made variables LATEST_IMAGE and WHEELS_IMAGE available for the following tasks. Values are \$LATEST_IMAGE and \$WHEELS_IMAGE
          if curl --silent -f -lSL https://index.docker.io/v1/repositories/\$(echo \$LATEST_IMAGE |sed -e 's|:|/tags/|'); then
            echo Image already present. Pulling.
            docker pull \$LATEST_IMAGE
          else
            derex.builder resolve derex/openedx/ironwood -v DEBUG
            cp /wheels_cache/* '${PWD}/.cache/wheels_cache/' || true
            sudo buildah push \$LATEST_IMAGE docker-daemon:\$LATEST_IMAGE
          fi"
    displayName: 'Install derex.builder, build images and push'
    env:
      TRANSIFEX_USERNAME: $(TRANSIFEX_USERNAME)
      TRANSIFEX_PASSWORD: $(TRANSIFEX_PASSWORD)
    timeoutInMinutes: 180

  - script: |
      set -x
      export WHEELS_IMAGE=$(echo "$WHEELS_IMAGE" | sed -e "s/'//g")
      docker run \
        --rm --privileged --security-opt="seccomp=unconfined" \
        --cap-add=ALL \
        -v /var/lib/containers/:/var/lib/containers/:rw,Z \
        -v /var/run/docker.sock:/var/run/docker.sock \
        derex/buildah \
        bash -c "
          if (buildah images | grep $(echo $WHEELS_IMAGE|sed s/:/.*/)); then
            if ! curl --silent -f -lSL https://index.docker.io/v1/repositories/\$(echo $WHEELS_IMAGE |sed -e 's|:|/tags/|'); then
              buildah tag localhost/$WHEELS_IMAGE docker.io/$WHEELS_IMAGE
              buildah push docker.io/$WHEELS_IMAGE
              buildah push $WHEELS_IMAGE docker-daemon:$WHEELS_IMAGE
              docker push $WHEELS_IMAGE
            fi
          fi"
    condition: always()
    displayName: 'Push the openedx-wheels image'

  - script: |
      set -ex
      export LATEST_IMAGE=$(echo "$LATEST_IMAGE" | sed -e "s/'//g")
      # If the dump is already there skip this step
      docker run --rm ${LATEST_IMAGE} ls -l /openedx/empty_dump.sql.bz2 && exit 0
      mysql -h localhost -psecret --protocol tcp -u root -e "CREATE DATABASE derex"
      DOCKER_RUN="docker run --add-host=mysql:$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+') --rm"
      $DOCKER_RUN ${LATEST_IMAGE} ./manage.py lms --settings derex.base migrate
      $DOCKER_RUN -e SERVICE_VARIANT=cms ${LATEST_IMAGE} ./manage.py cms --settings derex.base migrate
      mkdir /tmp/image
      sudo mysqldump -h localhost -psecret --protocol tcp -u root derex > /tmp/image/empty_dump.sql
      bzip2 /tmp/image/empty_dump.sql
      echo -e "FROM ${LATEST_IMAGE}\nCOPY empty_dump.sql.bz2 /openedx/" > /tmp/image/Dockerfile
      docker build /tmp/image -t ${LATEST_IMAGE}
      docker push ${LATEST_IMAGE}
    displayName: 'Run migrations and save dump inside image'

  - script: |
      set -ex
      export LATEST_IMAGE=$(echo "$LATEST_IMAGE" | sed -e "s/'//g")
      # Run the restore_dump.py script: it should work and add the users fixture to the db
      docker run --add-host=mysql:$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+') --rm ${LATEST_IMAGE} restore_dump.py
      # Make sure the fixtures ran and created test users
      mysql -h localhost --protocol tcp -u root -psecret derex -e "SELECT * from auth_user WHERE username='superuser'"|grep superuser
      docker push ${LATEST_IMAGE}
    displayName: 'Test the users fixture'

  - script: |
      export LATEST_IMAGE=$(echo "$LATEST_IMAGE" | sed -e "s/'//g")
      docker push ${LATEST_IMAGE}
    displayName: 'Push the image'

  - script: |
      export LATEST_IMAGE="$(echo "$LATEST_IMAGE" | sed -e "s/'//g")"
      export IMAGE_TO_PUSH="$(echo ${LATEST_IMAGE}|sed -e 's/:.*/:latest/')"
      docker tag "${LATEST_IMAGE}" "${IMAGE_TO_PUSH}"
      docker push "${IMAGE_TO_PUSH}"
    displayName: 'Also tag the image with the :latest tag and push it (only on master)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - script: |
      BEFORE=$(docker run --rm derex/wheelhouse:latest du /wheelhouse -s|cut -f1)
      AFTER=$(du .cache/wheels_cache -s|cut -f1)
      echo Current wheel house image is ${BEFORE} bytes. Now we have ${AFTER} bytes in the wheel cache.
      # Only act if we have at least one more Mb worth of wheels
      if  [ "${AFTER}" -gt "$((${BEFORE}+1000))" ]; then
        echo "${AFTER} is greater than ${BEFORE} plus one thousand";
        docker build .cache -t derex/wheelhouse:latest
        docker push derex/wheelhouse:latest
      fi;
    displayName: 'Build and push wheels image if necessary'
    condition: always()
